apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  annotations:
    install.istio.io/ignoreReconcile: "true"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"install.istio.io/v1alpha1","kind":"IstioOperator","metadata":{"annotations":{"install.istio.io/ignoreReconcile":"true"},"creationTimestamp":null,"name":"installed-state","namespace":"istio-system"},"spec":{"addonComponents":{"istiocoredns":{"enabled":false}},"components":{"base":{"enabled":true},"cni":{"enabled":false},"egressGateways":[{"enabled":true,"k8s":{"env":[{"name":"ISTIO_META_ROUTER_MODE","value":"standard"}],"hpaSpec":{"maxReplicas":5,"metrics":[{"resource":{"name":"cpu","targetAverageUtilization":80},"type":"Resource"}],"minReplicas":1,"scaleTargetRef":{"apiVersion":"apps/v1","kind":"Deployment","name":"istio-egressgateway"}},"resources":{"limits":{"cpu":"2000m","memory":"1024Mi"},"requests":{"cpu":"10m","memory":"40Mi"}},"service":{"ports":[{"name":"http2","port":80,"protocol":"TCP","targetPort":8080},{"name":"https","port":443,"protocol":"TCP","targetPort":8443},{"name":"tls","port":15443,"protocol":"TCP","targetPort":15443}]},"strategy":{"rollingUpdate":{"maxSurge":"100%","maxUnavailable":"25%"}}},"name":"istio-egressgateway"}],"ingressGateways":[{"enabled":true,"k8s":{"env":[{"name":"ISTIO_META_ROUTER_MODE","value":"standard"}],"hpaSpec":{"maxReplicas":5,"metrics":[{"resource":{"name":"cpu","targetAverageUtilization":80},"type":"Resource"}],"minReplicas":1,"scaleTargetRef":{"apiVersion":"apps/v1","kind":"Deployment","name":"istio-ingressgateway"}},"resources":{"limits":{"cpu":"2000m","memory":"1024Mi"},"requests":{"cpu":"10m","memory":"40Mi"}},"service":{"ports":[{"name":"status-port","port":15021,"protocol":"TCP","targetPort":15021},{"name":"http2","port":80,"protocol":"TCP","targetPort":8080},{"name":"https","port":443,"protocol":"TCP","targetPort":8443},{"name":"tcp","port":31400,"protocol":"TCP","targetPort":31400},{"name":"tls","port":15443,"protocol":"TCP","targetPort":15443}]},"strategy":{"rollingUpdate":{"maxSurge":"100%","maxUnavailable":"25%"}}},"name":"istio-ingressgateway"}],"istiodRemote":{"enabled":false},"pilot":{"enabled":true,"k8s":{"env":[{"name":"PILOT_TRACE_SAMPLING","value":"100"}],"readinessProbe":{"httpGet":{"path":"/ready","port":8080},"initialDelaySeconds":1,"periodSeconds":3,"timeoutSeconds":5},"resources":{"requests":{"cpu":"10m","memory":"100Mi"}},"strategy":{"rollingUpdate":{"maxSurge":"100%","maxUnavailable":"25%"}}}}},"hub":"docker.io/istio","meshConfig":{"accessLogFile":"/dev/stdout","defaultConfig":{"proxyMetadata":{}},"enablePrometheusMerge":true},"profile":"demo","tag":"1.8.1","values":{"base":{"enableCRDTemplates":false,"validationURL":""},"clusterResources":true,"gateways":{"istio-egressgateway":{"autoscaleEnabled":false,"env":{},"name":"istio-egressgateway","secretVolumes":[{"mountPath":"/etc/istio/egressgateway-certs","name":"egressgateway-certs","secretName":"istio-egressgateway-certs"},{"mountPath":"/etc/istio/egressgateway-ca-certs","name":"egressgateway-ca-certs","secretName":"istio-egressgateway-ca-certs"}],"type":"ClusterIP","zvpn":{}},"istio-ingressgateway":{"autoscaleEnabled":false,"env":{},"name":"istio-ingressgateway","secretVolumes":[{"mountPath":"/etc/istio/ingressgateway-certs","name":"ingressgateway-certs","secretName":"istio-ingressgateway-certs"},{"mountPath":"/etc/istio/ingressgateway-ca-certs","name":"ingressgateway-ca-certs","secretName":"istio-ingressgateway-ca-certs"}],"type":"LoadBalancer","zvpn":{}}},"global":{"arch":{"amd64":2,"ppc64le":2,"s390x":2},"configValidation":true,"defaultNodeSelector":{},"defaultPodDisruptionBudget":{"enabled":true},"defaultResources":{"requests":{"cpu":"10m"}},"imagePullPolicy":"","imagePullSecrets":[],"istioNamespace":"istio-system","istiod":{"enableAnalysis":false},"jwtPolicy":"first-party-jwt","logAsJson":false,"logging":{"level":"default:info"},"meshExpansion":{"enabled":false,"useILB":false},"meshNetworks":{},"mountMtlsCerts":false,"multiCluster":{"clusterName":"","enabled":false},"network":"","omitSidecarInjectorConfigMap":false,"oneNamespace":false,"operatorManageWebhooks":false,"pilotCertProvider":"istiod","priorityClassName":"","proxy":{"autoInject":"enabled","clusterDomain":"cluster.local","componentLogLevel":"misc:error","enableCoreDump":false,"excludeIPRanges":"","excludeInboundPorts":"","excludeOutboundPorts":"","image":"proxyv2","includeIPRanges":"*","logLevel":"warning","privileged":false,"readinessFailureThreshold":30,"readinessInitialDelaySeconds":1,"readinessPeriodSeconds":2,"resources":{"limits":{"cpu":"2000m","memory":"1024Mi"},"requests":{"cpu":"10m","memory":"40Mi"}},"statusPort":15020,"tracer":"zipkin"},"proxy_init":{"image":"proxyv2","resources":{"limits":{"cpu":"2000m","memory":"1024Mi"},"requests":{"cpu":"10m","memory":"10Mi"}}},"sds":{"token":{"aud":"istio-ca"}},"sts":{"servicePort":0},"tracer":{"datadog":{},"lightstep":{},"stackdriver":{},"zipkin":{}},"useMCP":false},"istiocoredns":{"coreDNSImage":"coredns/coredns","coreDNSPluginImage":"istio/coredns-plugin:0.2-istio-1.1","coreDNSTag":"1.6.2"},"istiodRemote":{"injectionURL":""},"pilot":{"autoscaleEnabled":false,"autoscaleMax":5,"autoscaleMin":1,"configMap":true,"cpu":{"targetAverageUtilization":80},"deploymentLabels":null,"enableProtocolSniffingForInbound":true,"enableProtocolSniffingForOutbound":true,"env":{"ENABLE_LEGACY_FSGROUP_INJECTION":false},"image":"pilot","keepaliveMaxServerConnectionAge":"30m","nodeSelector":{},"replicaCount":1,"traceSampling":1},"sidecarInjectorWebhook":{"enableNamespacesByDefault":false,"objectSelector":{"autoInject":true,"enabled":false},"rewriteAppHTTPProbe":true},"telemetry":{"enabled":true,"v2":{"enabled":true,"metadataExchange":{"wasmEnabled":false},"prometheus":{"enabled":true,"wasmEnabled":false},"stackdriver":{"configOverride":{},"enabled":false,"logging":false,"monitoring":false,"topology":false}}}}}}
  creationTimestamp: "2020-12-30T11:05:08Z"
  generation: 3
  managedFields:
  - apiVersion: install.istio.io/v1alpha1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:install.istio.io/ignoreReconcile: {}
          f:kubectl.kubernetes.io/last-applied-configuration: {}
      f:spec:
        .: {}
        f:addonComponents:
          .: {}
          f:istiocoredns:
            .: {}
            f:enabled: {}
        f:components:
          .: {}
          f:base:
            .: {}
            f:enabled: {}
          f:cni:
            .: {}
            f:enabled: {}
          f:egressGateways: {}
          f:ingressGateways: {}
          f:istiodRemote:
            .: {}
            f:enabled: {}
          f:pilot:
            .: {}
            f:enabled: {}
            f:k8s:
              .: {}
              f:env: {}
              f:readinessProbe:
                .: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:strategy:
                .: {}
                f:rollingUpdate:
                  .: {}
                  f:maxSurge: {}
                  f:maxUnavailable: {}
        f:hub: {}
        f:meshConfig:
          .: {}
          f:accessLogFile: {}
          f:defaultConfig:
            .: {}
            f:proxyMetadata: {}
          f:enablePrometheusMerge: {}
        f:profile: {}
        f:tag: {}
        f:values:
          .: {}
          f:base:
            .: {}
            f:enableCRDTemplates: {}
            f:validationURL: {}
          f:clusterResources: {}
          f:gateways:
            .: {}
            f:istio-egressgateway:
              .: {}
              f:autoscaleEnabled: {}
              f:env: {}
              f:name: {}
              f:secretVolumes: {}
              f:type: {}
              f:zvpn: {}
            f:istio-ingressgateway:
              .: {}
              f:autoscaleEnabled: {}
              f:env: {}
              f:name: {}
              f:secretVolumes: {}
              f:type: {}
              f:zvpn: {}
          f:global:
            .: {}
            f:arch:
              .: {}
              f:amd64: {}
              f:ppc64le: {}
              f:s390x: {}
            f:configValidation: {}
            f:defaultNodeSelector: {}
            f:defaultPodDisruptionBudget:
              .: {}
              f:enabled: {}
            f:defaultResources:
              .: {}
              f:requests:
                .: {}
                f:cpu: {}
            f:imagePullPolicy: {}
            f:imagePullSecrets: {}
            f:istioNamespace: {}
            f:istiod:
              .: {}
              f:enableAnalysis: {}
            f:jwtPolicy: {}
            f:logAsJson: {}
            f:logging:
              .: {}
              f:level: {}
            f:meshExpansion:
              .: {}
              f:enabled: {}
              f:useILB: {}
            f:meshNetworks: {}
            f:mountMtlsCerts: {}
            f:multiCluster:
              .: {}
              f:clusterName: {}
              f:enabled: {}
            f:network: {}
            f:omitSidecarInjectorConfigMap: {}
            f:oneNamespace: {}
            f:operatorManageWebhooks: {}
            f:pilotCertProvider: {}
            f:priorityClassName: {}
            f:proxy:
              .: {}
              f:autoInject: {}
              f:clusterDomain: {}
              f:componentLogLevel: {}
              f:enableCoreDump: {}
              f:excludeIPRanges: {}
              f:excludeInboundPorts: {}
              f:excludeOutboundPorts: {}
              f:image: {}
              f:includeIPRanges: {}
              f:logLevel: {}
              f:privileged: {}
              f:readinessFailureThreshold: {}
              f:readinessInitialDelaySeconds: {}
              f:readinessPeriodSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:statusPort: {}
              f:tracer: {}
            f:proxy_init:
              .: {}
              f:image: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
            f:sds:
              .: {}
              f:token:
                .: {}
                f:aud: {}
            f:sts:
              .: {}
              f:servicePort: {}
            f:tracer:
              .: {}
              f:datadog: {}
              f:lightstep: {}
              f:stackdriver: {}
              f:zipkin: {}
            f:useMCP: {}
          f:istiocoredns:
            .: {}
            f:coreDNSImage: {}
            f:coreDNSPluginImage: {}
            f:coreDNSTag: {}
          f:istiodRemote:
            .: {}
            f:injectionURL: {}
          f:pilot:
            .: {}
            f:autoscaleEnabled: {}
            f:autoscaleMax: {}
            f:autoscaleMin: {}
            f:configMap: {}
            f:cpu:
              .: {}
              f:targetAverageUtilization: {}
            f:deploymentLabels: {}
            f:enableProtocolSniffingForInbound: {}
            f:enableProtocolSniffingForOutbound: {}
            f:env:
              .: {}
              f:ENABLE_LEGACY_FSGROUP_INJECTION: {}
            f:image: {}
            f:keepaliveMaxServerConnectionAge: {}
            f:nodeSelector: {}
            f:replicaCount: {}
            f:traceSampling: {}
          f:sidecarInjectorWebhook:
            .: {}
            f:objectSelector:
              .: {}
              f:autoInject: {}
            f:rewriteAppHTTPProbe: {}
          f:telemetry:
            .: {}
            f:enabled: {}
            f:v2:
              .: {}
              f:enabled: {}
              f:metadataExchange: {}
              f:prometheus:
                .: {}
                f:enabled: {}
              f:stackdriver:
                .: {}
                f:configOverride: {}
                f:enabled: {}
                f:logging: {}
                f:monitoring: {}
                f:topology: {}
    manager: istioctl
    operation: Update
    time: "2020-12-30T11:05:08Z"
  - apiVersion: install.istio.io/v1alpha1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:values:
          f:sidecarInjectorWebhook:
            f:enableNamespacesByDefault: {}
            f:objectSelector:
              f:enabled: {}
          f:telemetry:
            f:v2:
              f:metadataExchange:
                f:wasmEnabled: {}
              f:prometheus:
                f:wasmEnabled: {}
    manager: kubectl-edit
    operation: Update
    time: "2020-12-30T13:03:34Z"
  name: installed-state
  namespace: istio-system
  resourceVersion: "23152"
  selfLink: /apis/install.istio.io/v1alpha1/namespaces/istio-system/istiooperators/installed-state
  uid: ff29a425-7b06-4020-8a31-d1311930a2d6
spec:
  addonComponents:
    istiocoredns:
      enabled: false
  components:
    base:
      enabled: true
    cni:
      enabled: false
    egressGateways:
    - enabled: true
      k8s:
        env:
        - name: ISTIO_META_ROUTER_MODE
          value: standard
        hpaSpec:
          maxReplicas: 5
          metrics:
          - resource:
              name: cpu
              targetAverageUtilization: 80
            type: Resource
          minReplicas: 1
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: istio-egressgateway
        resources:
          limits:
            cpu: 2000m
            memory: 1024Mi
          requests:
            cpu: 10m
            memory: 40Mi
        service:
          ports:
          - name: http2
            port: 80
            protocol: TCP
            targetPort: 8080
          - name: https
            port: 443
            protocol: TCP
            targetPort: 8443
          - name: tls
            port: 15443
            protocol: TCP
            targetPort: 15443
        strategy:
          rollingUpdate:
            maxSurge: 100%
            maxUnavailable: 25%
      name: istio-egressgateway
    ingressGateways:
    - enabled: true
      k8s:
        env:
        - name: ISTIO_META_ROUTER_MODE
          value: standard
        hpaSpec:
          maxReplicas: 5
          metrics:
          - resource:
              name: cpu
              targetAverageUtilization: 80
            type: Resource
          minReplicas: 1
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: istio-ingressgateway
        resources:
          limits:
            cpu: 2000m
            memory: 1024Mi
          requests:
            cpu: 10m
            memory: 40Mi
        service:
          ports:
          - name: status-port
            port: 15021
            protocol: TCP
            targetPort: 15021
          - name: http2
            port: 80
            protocol: TCP
            targetPort: 8080
          - name: https
            port: 443
            protocol: TCP
            targetPort: 8443
          - name: tcp
            port: 31400
            protocol: TCP
            targetPort: 31400
          - name: tls
            port: 15443
            protocol: TCP
            targetPort: 15443
        strategy:
          rollingUpdate:
            maxSurge: 100%
            maxUnavailable: 25%
      name: istio-ingressgateway
    istiodRemote:
      enabled: false
    pilot:
      enabled: true
      k8s:
        env:
        - name: PILOT_TRACE_SAMPLING
          value: "100"
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 3
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
        strategy:
          rollingUpdate:
            maxSurge: 100%
            maxUnavailable: 25%
  hub: docker.io/istio
  meshConfig:
    accessLogFile: /dev/stdout
    defaultConfig:
      proxyMetadata: {}
    enablePrometheusMerge: true
  profile: demo
  tag: 1.8.1
  values:
    base:
      enableCRDTemplates: false
      validationURL: ""
    clusterResources: true
    gateways:
      istio-egressgateway:
        autoscaleEnabled: false
        env: {}
        name: istio-egressgateway
        secretVolumes:
        - mountPath: /etc/istio/egressgateway-certs
          name: egressgateway-certs
          secretName: istio-egressgateway-certs
        - mountPath: /etc/istio/egressgateway-ca-certs
          name: egressgateway-ca-certs
          secretName: istio-egressgateway-ca-certs
        type: ClusterIP
        zvpn: {}
      istio-ingressgateway:
        autoscaleEnabled: false
        env: {}
        name: istio-ingressgateway
        secretVolumes:
        - mountPath: /etc/istio/ingressgateway-certs
          name: ingressgateway-certs
          secretName: istio-ingressgateway-certs
        - mountPath: /etc/istio/ingressgateway-ca-certs
          name: ingressgateway-ca-certs
          secretName: istio-ingressgateway-ca-certs
        type: LoadBalancer
        zvpn: {}
    global:
      arch:
        amd64: 2
        ppc64le: 2
        s390x: 2
      configValidation: true
      defaultNodeSelector: {}
      defaultPodDisruptionBudget:
        enabled: true
      defaultResources:
        requests:
          cpu: 10m
      imagePullPolicy: ""
      imagePullSecrets: []
      istioNamespace: istio-system
      istiod:
        enableAnalysis: false
      jwtPolicy: first-party-jwt
      logAsJson: false
      logging:
        level: default:info
      meshExpansion:
        enabled: false
        useILB: false
      meshNetworks: {}
      mountMtlsCerts: false
      multiCluster:
        clusterName: ""
        enabled: false
      network: ""
      omitSidecarInjectorConfigMap: false
      oneNamespace: false
      operatorManageWebhooks: false
      pilotCertProvider: istiod
      priorityClassName: ""
      proxy:
        autoInject: enabled
        clusterDomain: cluster.local
        componentLogLevel: misc:error
        enableCoreDump: false
        excludeIPRanges: ""
        excludeInboundPorts: ""
        excludeOutboundPorts: ""
        image: proxyv2
        includeIPRanges: '*'
        logLevel: warning
        privileged: false
        readinessFailureThreshold: 30
        readinessInitialDelaySeconds: 1
        readinessPeriodSeconds: 2
        resources:
          limits:
            cpu: 2000m
            memory: 1024Mi
          requests:
            cpu: 10m
            memory: 40Mi
        statusPort: 15020
        tracer: zipkin
      proxy_init:
        image: proxyv2
        resources:
          limits:
            cpu: 2000m
            memory: 1024Mi
          requests:
            cpu: 10m
            memory: 10Mi
      sds:
        token:
          aud: istio-ca
      sts:
        servicePort: 0
      tracer:
        datadog: {}
        lightstep: {}
        stackdriver: {}
        zipkin: {}
      useMCP: false
    istiocoredns:
      coreDNSImage: coredns/coredns
      coreDNSPluginImage: istio/coredns-plugin:0.2-istio-1.1
      coreDNSTag: 1.6.2
    istiodRemote:
      injectionURL: ""
    pilot:
      autoscaleEnabled: false
      autoscaleMax: 5
      autoscaleMin: 1
      configMap: true
      cpu:
        targetAverageUtilization: 80
      deploymentLabels: null
      enableProtocolSniffingForInbound: true
      enableProtocolSniffingForOutbound: true
      env:
        ENABLE_LEGACY_FSGROUP_INJECTION: false
      image: pilot
      keepaliveMaxServerConnectionAge: 30m
      nodeSelector: {}
      replicaCount: 1
      traceSampling: 1
    sidecarInjectorWebhook:
      enableNamespacesByDefault: true
      objectSelector:
        autoInject: true
        enabled: true
      rewriteAppHTTPProbe: true
    telemetry:
      enabled: true
      v2:
        enabled: true
        metadataExchange:
          wasmEnabled: true
        prometheus:
          enabled: true
          wasmEnabled: true
        stackdriver:
          configOverride: {}
          enabled: false
          logging: false
          monitoring: false
          topology: false
